I"<blockquote>
  <p>프로그래머스 프린터 문제</p>
</blockquote>

<h2 id="문제-설명">문제 설명</h2>
<p>일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다. 그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다. 이런 문제를 보완하기 위해 중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다. 이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다.</p>

<ol>
  <li>인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다.</li>
  <li>나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다.</li>
  <li>그렇지 않으면 J를 인쇄합니다.
예를 들어, 4개의 문서(A, B, C, D)가 순서대로 인쇄 대기목록에 있고 중요도가 2 1 3 2 라면 C D A B 순으로 인쇄하게 됩니다.</li>
</ol>

<p>내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 알고 싶습니다. 위의 예에서 C는 1번째로, A는 3번째로 인쇄됩니다.</p>

<p>현재 대기목록에 있는 문서의 중요도가 순서대로 담긴 배열 priorities와 내가 인쇄를 요청한 문서가 현재 대기목록의 어떤 위치에 있는지를 알려주는 location이 매개변수로 주어질 때, 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 return 하도록 solution 함수를 작성해주세요.</p>

<p>제한사항
현재 대기목록에는 1개 이상 100개 이하의 문서가 있습니다.
인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻입니다.
location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현합니다.</p>

<h2 id="제한사항">제한사항</h2>
<p>prices의 각 가격은 1 이상 10,000 이하인 자연수입니다.<br />
prices의 길이는 2 이상 100,000 이하입니다.</p>

<h2 id="입출력-예">입출력 예</h2>
<p>priorities  location   return <br />
[2,1,3,2]       2         1	<br />
[1,1,9,1,1,1]   0         5 <br /></p>

<h2 id="입출력-예-설명">입출력 예 설명</h2>
<p>예제 #1</p>

<p>문제에 나온 예와 같습니다.</p>

<p>예제 #2</p>

<p>6개의 문서(A, B, C, D, E, F)가 인쇄 대기목록에 있고 중요도가 1 1 9 1 1 1 이므로 C D E F A B 순으로 인쇄합니다.</p>

<h3 id="문제-풀이">문제 풀이</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
import java.util.stream.*;
import java.util.*;

class Solution {
    public int solution(int[] priorities, int location) {
        int answer = 0;
        LinkedList&lt;Integer[]&gt; lk = new LinkedList&lt;&gt;();

        for(int i = 0 ; i &lt; priorities.length ; i++){
            if(i == location){
                lk.offer(new Integer[]{priorities[i],-1});
            }else{
                lk.offer(new Integer[]{priorities[i],0});
            }
        }

        int cnt = 0;
        while (!lk.isEmpty()){
            Integer[] max = lk.stream().max( (a,b) -&gt; a[0].compareTo(b[0]) ).orElse(new Integer[]{-1,0});

            if(max[0] == lk.peek()[0]){

                cnt++;
                if(lk.poll()[1] == -1){
                    break;
                }
            }else{
                lk.offer(lk.poll());
            }
        }

        
        
        return cnt;
    }
}
</code></pre></div></div>

<h2 id="정답해설">정답해설</h2>

<p>스택아니면 큐를 써써 풀수도 있지만 일단은 그냥 풀어봤다.  <br />
이중포문으로 자신보다 크면 카운트를 늘리고 작으면 카운트를 늘리고 바로 빠져나와서 초를 세준다.</p>
:ET